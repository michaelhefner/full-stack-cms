# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Navigation {
  id: ID!
  title: String
  url: String
  basicpages: BasicPage
  parent: Navigation
}

input NavigationWhereUniqueInput {
  id: ID
  url: String
}

input NavigationWhereInput {
  AND: [NavigationWhereInput!]
  OR: [NavigationWhereInput!]
  NOT: [NavigationWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  basicpages: BasicPageWhereInput
  parent: NavigationWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NavigationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input NavigationUpdateInput {
  title: String
  url: String
  basicpages: BasicPageRelateToOneForUpdateInput
  parent: NavigationRelateToOneForUpdateInput
}

input BasicPageRelateToOneForUpdateInput {
  create: BasicPageCreateInput
  connect: BasicPageWhereUniqueInput
  disconnect: Boolean
}

input NavigationRelateToOneForUpdateInput {
  create: NavigationCreateInput
  connect: NavigationWhereUniqueInput
  disconnect: Boolean
}

input NavigationUpdateArgs {
  where: NavigationWhereUniqueInput!
  data: NavigationUpdateInput!
}

input NavigationCreateInput {
  title: String
  url: String
  basicpages: BasicPageRelateToOneForCreateInput
  parent: NavigationRelateToOneForCreateInput
}

input BasicPageRelateToOneForCreateInput {
  create: BasicPageCreateInput
  connect: BasicPageWhereUniqueInput
}

input NavigationRelateToOneForCreateInput {
  create: NavigationCreateInput
  connect: NavigationWhereUniqueInput
}

type BasicPage {
  id: ID!
  title: String
  navigation: Navigation
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  status: String
  publishedAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BasicPageWhereUniqueInput {
  id: ID
}

input BasicPageWhereInput {
  AND: [BasicPageWhereInput!]
  OR: [BasicPageWhereInput!]
  NOT: [BasicPageWhereInput!]
  id: IDFilter
  title: StringFilter
  navigation: NavigationWhereInput
  content: ContentManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  status: StringNullableFilter
  publishedAt: DateTimeNullableFilter
}

input ContentManyRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BasicPageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
}

input BasicPageUpdateInput {
  title: String
  navigation: NavigationRelateToOneForUpdateInput
  content: ContentRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  status: String
  publishedAt: DateTime
}

input ContentRelateToManyForUpdateInput {
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input BasicPageUpdateArgs {
  where: BasicPageWhereUniqueInput!
  data: BasicPageUpdateInput!
}

input BasicPageCreateInput {
  title: String
  navigation: NavigationRelateToOneForCreateInput
  content: ContentRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  status: String
  publishedAt: DateTime
}

input ContentRelateToManyForCreateInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Content {
  id: ID!
  title: String
  author: User
  classes: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  basicpages(where: BasicPageWhereInput! = {}, orderBy: [BasicPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BasicPageWhereUniqueInput): [BasicPage!]
  basicpagesCount(where: BasicPageWhereInput! = {}): Int
  content: Content_content_Document
  status: String
  publishedAt: DateTime
}

type Content_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  classes: StringFilter
  tags: TagManyRelationFilter
  basicpages: BasicPageManyRelationFilter
  status: StringNullableFilter
  publishedAt: DateTimeNullableFilter
}

input BasicPageManyRelationFilter {
  every: BasicPageWhereInput
  some: BasicPageWhereInput
  none: BasicPageWhereInput
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  classes: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
}

input ContentUpdateInput {
  title: String
  author: UserRelateToOneForUpdateInput
  classes: String
  tags: TagRelateToManyForUpdateInput
  basicpages: BasicPageRelateToManyForUpdateInput
  content: JSON
  status: String
  publishedAt: DateTime
}

input BasicPageRelateToManyForUpdateInput {
  disconnect: [BasicPageWhereUniqueInput!]
  set: [BasicPageWhereUniqueInput!]
  create: [BasicPageCreateInput!]
  connect: [BasicPageWhereUniqueInput!]
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  title: String
  author: UserRelateToOneForCreateInput
  classes: String
  tags: TagRelateToManyForCreateInput
  basicpages: BasicPageRelateToManyForCreateInput
  content: JSON
  status: String
  publishedAt: DateTime
}

input BasicPageRelateToManyForCreateInput {
  create: [BasicPageCreateInput!]
  connect: [BasicPageWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
  basicpages(where: BasicPageWhereInput! = {}, orderBy: [BasicPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BasicPageWhereUniqueInput): [BasicPage!]
  basicpagesCount(where: BasicPageWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  content: ContentManyRelationFilter
  basicpages: BasicPageManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  content: ContentRelateToManyForUpdateInput
  basicpages: BasicPageRelateToManyForUpdateInput
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  content: ContentRelateToManyForCreateInput
  basicpages: BasicPageRelateToManyForCreateInput
  createdAt: DateTime
}

type Tag {
  id: ID!
  name: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
  basicpages(where: BasicPageWhereInput! = {}, orderBy: [BasicPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BasicPageWhereUniqueInput): [BasicPage!]
  basicpagesCount(where: BasicPageWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  tags: TagManyRelationFilter
  content: ContentManyRelationFilter
  basicpages: BasicPageManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  tags: TagRelateToManyForUpdateInput
  content: ContentRelateToManyForUpdateInput
  basicpages: BasicPageRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  tags: TagRelateToManyForCreateInput
  content: ContentRelateToManyForCreateInput
  basicpages: BasicPageRelateToManyForCreateInput
}

type Image {
  id: ID!
  name: String
  altText: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

type SiteSetting {
  id: ID!
  title: String
  url: String
  metaDescription: String
  logo: ImageFieldOutput
  favicon: ImageFieldOutput
}

input SiteSettingWhereUniqueInput {
  id: ID
  url: String
}

input SiteSettingWhereInput {
  AND: [SiteSettingWhereInput!]
  OR: [SiteSettingWhereInput!]
  NOT: [SiteSettingWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  metaDescription: StringFilter
}

input SiteSettingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  metaDescription: OrderDirection
}

input SiteSettingUpdateInput {
  title: String
  url: String
  metaDescription: String
  logo: ImageFieldInput
  favicon: ImageFieldInput
}

input SiteSettingUpdateArgs {
  where: SiteSettingWhereUniqueInput!
  data: SiteSettingUpdateInput!
}

input SiteSettingCreateInput {
  title: String
  url: String
  metaDescription: String
  logo: ImageFieldInput
  favicon: ImageFieldInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createNavigation(data: NavigationCreateInput!): Navigation
  createNavigations(data: [NavigationCreateInput!]!): [Navigation]
  updateNavigation(where: NavigationWhereUniqueInput!, data: NavigationUpdateInput!): Navigation
  updateNavigations(data: [NavigationUpdateArgs!]!): [Navigation]
  deleteNavigation(where: NavigationWhereUniqueInput!): Navigation
  deleteNavigations(where: [NavigationWhereUniqueInput!]!): [Navigation]
  createBasicPage(data: BasicPageCreateInput!): BasicPage
  createBasicPages(data: [BasicPageCreateInput!]!): [BasicPage]
  updateBasicPage(where: BasicPageWhereUniqueInput!, data: BasicPageUpdateInput!): BasicPage
  updateBasicPages(data: [BasicPageUpdateArgs!]!): [BasicPage]
  deleteBasicPage(where: BasicPageWhereUniqueInput!): BasicPage
  deleteBasicPages(where: [BasicPageWhereUniqueInput!]!): [BasicPage]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createSiteSetting(data: SiteSettingCreateInput!): SiteSetting
  createSiteSettings(data: [SiteSettingCreateInput!]!): [SiteSetting]
  updateSiteSetting(where: SiteSettingWhereUniqueInput!, data: SiteSettingUpdateInput!): SiteSetting
  updateSiteSettings(data: [SiteSettingUpdateArgs!]!): [SiteSetting]
  deleteSiteSetting(where: SiteSettingWhereUniqueInput!): SiteSetting
  deleteSiteSettings(where: [SiteSettingWhereUniqueInput!]!): [SiteSetting]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  navigation(where: NavigationWhereUniqueInput!): Navigation
  navigations(where: NavigationWhereInput! = {}, orderBy: [NavigationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NavigationWhereUniqueInput): [Navigation!]
  navigationsCount(where: NavigationWhereInput! = {}): Int
  basicPage(where: BasicPageWhereUniqueInput!): BasicPage
  basicPages(where: BasicPageWhereInput! = {}, orderBy: [BasicPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BasicPageWhereUniqueInput): [BasicPage!]
  basicPagesCount(where: BasicPageWhereInput! = {}): Int
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  siteSetting(where: SiteSettingWhereUniqueInput!): SiteSetting
  siteSettings(where: SiteSettingWhereInput! = {}, orderBy: [SiteSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SiteSettingWhereUniqueInput): [SiteSetting!]
  siteSettingsCount(where: SiteSettingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
